# UI / UX
from h2o_wave import Q, ui, main, app

# user scripts
from model import EncoderCNN, DecoderRNN
from caption_generator import setup_ml, generate_captions
import os
from PIL import Image

print('Imports Succesfull')

# resize image for a more optimized display in the browser
def resize_img(img_path: str) -> None:
    """
    Resize images but not cropp. 
    """
    basewidth = 100
    img = Image.open(img_path)
    print(img.size)
    wpercent = (basewidth/float(img.size[0]))
    hsize = int((float(img.size[1])*float(wpercent)))
    img = img.resize((basewidth,hsize), Image.ANTIALIAS)
    print(img.size)
    img.save(img_path)


def upload_image(q: Q, message: str) -> None:
    """
    Creating UI when the user wants to upload the image so automatic captions can
    be generated.
    :param q: Query argument from the H2O Wave server
    :message: Generated captions 
    :return: None
    """
    # UI uploader element
    # Uploader displaying the back button
    q.page['uploader'] = ui.form_card(
        box='uploader',
        items=[
            ui.text_xl("Why don't you try another picture?"),
            ui.button(
                name='show_form',
                label='Back', 
                primary=True
            ),
        ]
    )
    

    # uploaded image
    q.page['image'] = ui.image_card(
        box='image',
        title='',
        type='jpg',
        path=q.args.upload_image[0]
    )

    # show text generated by ML
    q.page['text'] = ui.form_card(
        box='text',
        items=[
            ui.text_xl(f'I see: {message}')
        ],
    )    

 
def setup_app(q: Q, path: str) -> None:
    """
    Activities that happen the first time someone comes to this app, such as user variables and home page cards
    :param q: Query argument from the H2O Wave server
    :param path: path 
    :return: None
    """
    print("Setting up the app for a new browser tab..")

    # Meta element
    q.page['meta'] = ui.meta_card(
        title='Automatic Caption Generator',
        box='',
        layouts=[
            ui.layout(
                breakpoint='xs',
                zones=[
                    ui.zone('header', justify='center'),
                    ui.zone('uploader'),
                    ui.zone('image'),
                    ui.zone('text'),
                ]
            )
        ]
    )

    # Header
    q.page['header'] = ui.header_card(
        box="header",
        title="Automatic Caption Generator",
        subtitle="This App generates captions to the image, provided by the user "
    )

    # UI uploader element
    q.page['uploader'] = ui.form_card(
        box='uploader',
        items=[
            
            ui.file_upload(
                name='upload_image',
                label='Upload Image',
                multiple=False
            ),       
        ])  

    # base image where the uploaded image will be
    q.page['image'] = ui.image_card(
        box='image',
        title='',
        type='jpg',
        path=path
    )

    # text where generated captions are going to be
    q.page['text'] = ui.form_card(
        box='text',
        items=[
            ui.text_xl('Once Image is uploaded, captions will appear here'),
        ],
    )
    
    q.client.initialized = True


@app('/')
async def serve(q: Q) -> None:
    """
    Handle interactions from the browser such as new arrivals and button clicks
    :param q: Query argument from the H2O Wave server
    :return: None
    """

    # # upload default image
    default_image_path, = await q.site.upload(['../static/default_image.jpeg'])   
    print("\n-- ACG app started. Handling a user event..\n\n")

    if not q.client.initialized:
        setup_app(q, default_image_path)

    elif q.args.upload_image:
        # upload image and trigger ML component
        transformer, encoder, decoder, vocab = setup_ml()
        local_path = await q.site.download(q.args.upload_image[0], '.')
        
        # caption generation
        message = await q.run(generate_captions, local_path, vocab, transformer, encoder, decoder)

        resize_img(local_path)
        upload_image(q, message)
        os.remove(local_path)

    elif q.args.show_form:      
        # default setup (firts time appearance fo the app)
        setup_app(q, default_image_path)
        
    await q.page.save()